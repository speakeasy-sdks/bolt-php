<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace bolt_dev\bolt;

class Webhooks 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Create a webhook to subscribe to certain events
     * 
     * Create a new webhook to receive notifications from Bolt about various events, such as transaction status.
     * 
     * @param \bolt_dev\bolt\Models\Shared\WebhookInput $request
     * @param \bolt_dev\bolt\Models\Operations\WebhooksCreateSecurity $security
     * @return \bolt_dev\bolt\Models\Operations\WebhooksCreateResponse
     */
	public function create(
        \bolt_dev\bolt\Models\Shared\WebhookInput $request,
        \bolt_dev\bolt\Models\Operations\WebhooksCreateSecurity $security,
    ): \bolt_dev\bolt\Models\Operations\WebhooksCreateResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body === null) {
            throw new \Exception('Request body is required');
        }
        $options = array_merge_recursive($options, $body);
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \bolt_dev\bolt\Models\Operations\WebhooksCreateResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhook = $serializer->deserialize((string)$httpResponse->getBody(), 'bolt_dev\bolt\Models\Shared\Webhook', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete an existing webhook
     * 
     * Delete an existing webhook. You will no longer receive notifications from Bolt about its events.
     * 
     * @param \bolt_dev\bolt\Models\Operations\WebhooksDeleteRequest $request
     * @param \bolt_dev\bolt\Models\Operations\WebhooksDeleteSecurity $security
     * @return \bolt_dev\bolt\Models\Operations\WebhooksDeleteResponse
     */
	public function delete(
        \bolt_dev\bolt\Models\Operations\WebhooksDeleteRequest $request,
        \bolt_dev\bolt\Models\Operations\WebhooksDeleteSecurity $security,
    ): \bolt_dev\bolt\Models\Operations\WebhooksDeleteResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{id}', \bolt_dev\bolt\Models\Operations\WebhooksDeleteRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \bolt_dev\bolt\Models\Operations\WebhooksDeleteResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'bolt_dev\bolt\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve information for a specific webhook
     * 
     * Retrieve information for an existing webhook.
     * 
     * @param \bolt_dev\bolt\Models\Operations\WebhooksGetRequest $request
     * @param \bolt_dev\bolt\Models\Operations\WebhooksGetSecurity $security
     * @return \bolt_dev\bolt\Models\Operations\WebhooksGetResponse
     */
	public function get(
        \bolt_dev\bolt\Models\Operations\WebhooksGetRequest $request,
        \bolt_dev\bolt\Models\Operations\WebhooksGetSecurity $security,
    ): \bolt_dev\bolt\Models\Operations\WebhooksGetResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks/{id}', \bolt_dev\bolt\Models\Operations\WebhooksGetRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \bolt_dev\bolt\Models\Operations\WebhooksGetResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhook = $serializer->deserialize((string)$httpResponse->getBody(), 'bolt_dev\bolt\Models\Shared\Webhook', 'json');
            }
        }
        else if ($httpResponse->getStatusCode() === 422) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->error = $serializer->deserialize((string)$httpResponse->getBody(), 'bolt_dev\bolt\Models\Shared\Error', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Retrieve information about all existing webhooks
     * 
     * Retrieve information about all existing webhooks.
     * 
     * @param \bolt_dev\bolt\Models\Operations\WebhooksGetAllRequest $request
     * @param \bolt_dev\bolt\Models\Operations\WebhooksGetAllSecurity $security
     * @return \bolt_dev\bolt\Models\Operations\WebhooksGetAllResponse
     */
	public function getAll(
        \bolt_dev\bolt\Models\Operations\WebhooksGetAllRequest $request,
        \bolt_dev\bolt\Models\Operations\WebhooksGetAllSecurity $security,
    ): \bolt_dev\bolt\Models\Operations\WebhooksGetAllResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/webhooks');
        
        $options = ['http_errors' => false];
        $options = array_merge_recursive($options, Utils\Utils::getHeaders($request));
        if (!array_key_exists('headers', $options)) {
            $options['headers'] = [];
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $client = Utils\Utils::configureSecurityClient($this->sdkConfiguration->defaultClient, $security);
        $httpResponse = $client->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \bolt_dev\bolt\Models\Operations\WebhooksGetAllResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->webhooksGetAll200ApplicationJSONObject = $serializer->deserialize((string)$httpResponse->getBody(), 'bolt_dev\bolt\Models\Operations\WebhooksGetAll200ApplicationJSON', 'json');
            }
        }

        return $response;
    }
}